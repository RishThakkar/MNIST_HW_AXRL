#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>

#ifndef FUNCTIONS_H
#define FUNCTIONS_H
#define IMAGE_HEIGHT 42
#define IMAGE_WIDTH  42

int current_height = IMAGE_HEIGHT;
int current_width = IMAGE_WIDTH;


float weights_bias[] = {0.25, -2.5, 0, 1.5,             //Conv 1 Weights
                        -0.25, -2.5, 0.25, 1.75,        
                        0.25, -2.75, -0.25, 1.75,
                        0, -2.25, 0.25, 2.25,
                        -0.25, -2.5, -0.25, 2,
                        -0.25, -2.75, -0.25, 2.25,
                        0, -2.25, -0.25, 1.25,
                        -0.25, -2.5, 0.25, 2,
                        0.25, -1.75, -0.25, 2,
                        0, 0, 0, 0,                 //Biases
                        -0.25, 0, 0.25, -0.25,          //Conv 2 Weights
                        -0.5, 1.25, 0.25, 0.75,
                        0, 0, 0, -0.25,
                        0.75, -2, -0.25, 0,
                        0.25, 0.25, -0.25, 0,
                        -0.5, 1, 0, -0.25,
                        0.25, -0.25, 0.25, 0,
                        0.25, -1.5, 0, 0.75,
                        0, 0.25, 0, 0,
                        0.5, 1.25, -0.25, -0.25,
                        0, -0.25, 0, 0,
                        -0.25, -1.75, 0.25, 0.75,
                        0, 0.25, -0.25, -0.25,
                        -1.25, 0.75, 0, -0.75,
                        0.25, 0, 0, 0,
                        1.25, -2.25, 0, 1.25,
                        0, 0.25, 0, 0,
                        -1.5, 1, -0.25, -1.75,
                        -0.25, 0, -0.25, 0,
                        1.25, -1.75, 0, 1.25,
                        0.25, 0, 0, 0.25,
                        -1, 1, 0.25, -1.25,
                        -0.25, -0.25, 0, 0,
                        1, -2.5, 0, 1.5,
                        -0.25, 0, 0.25, -0.25,
                        -0.5, 0.75, -0.25, 0,
                        0, 0.25, 0, -0.25,
                        1, -1.75, 0, 0.75,
                        0, -0.25, -0.25, 0,
                        -1.25, 1, 0, -0.75,
                        0, 0, -0.25, 0,
                        1.25, -1.75, -0.25, 1,
                        0.25, -0.25, 0, -0.25,
                        -0.75, 1.25, 0, -1,
                        0, 0.25, 0, 0.25,
                        1.5, -1.25, 0, 1.25,
                        0, 0.25, 0, 0,                  //Bias
                        -0.5, 0, 0, 0.5, 0, -0.5, 0, -0.25, -0.25, -0.25,       //Dense Layer Weights (Can be wrong) Check once
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -0.5, 0.25, 0, 0.5, 0.25, -0.5, 0.25, -0.25, -0.5, -0.25,
                        -0.5, 0, 0.5, 0.75, -0.25, -0.5, 0.5, -0.75, -0.75, -1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0.25,
                        -0.25, 0, 0.25, 0.75, -0.25, -0.5, 0.25, -0.5, -0.5, -1.25,
                        -0.5, -0.75, 0.75, 0.75, -1, -0.25, 0.75, -1.25, -0.25, -1.5,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -0.5, -0.25, 0.5, 0.5, -0.75, -0.25, 0.5, -1.5, -0.25, -2,
                        0, 0, 0.75, 0.5, -1.25, 0, 0.5, -2, 0.25, -1.75,
                        0, 0, -0.25, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, -0.25, 0.25,
                        0, 0.25, 0.75, 0.5, -0.75, 0, 0.25, -2, 0.25, -2,
                        0.25, 0.5, 0.75, 0.5, -1.25, 0, 0.25, -2.5, 0.5, -2,
                        0, 0, -0.25, 0, 0, 0, 0, 0, 0, 0,
                        0, -0.25, 0, 0, 0, 0, 0, 0, 0, -0.25,
                        0.25, 0.5, 0.5, 0.5, -0.75, 0, 0.5, -2.5, 0.5, -2,
                        0.25, 0, 0.75, 0.25, -0.75, 0.25, 0.75, -2.75, 0.5, -2.25,
                        0, 0, 0, 0, 0, 0, -0.25, 0, 0, 0.25,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0.25, 0, 0.5, 0.25, -0.25, 0, 0.5, -3, 0.5, -2.5,
                        0, 0.25, 0.25, 0, -0.25, 0.25, 1, -2.75, 0.25, -2.5,
                        0, 0, 0, 0, 0, 0, -0.25, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -0.25, 0.5, -0.5, -1, 0.5, 0.25, 1.25, -2.75, 0, -2.5,
                        -0.75, 0.25, -1.25, -1.5, 0.5, 0.5, 1, -1, -0.25, -1.25,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        -0.75, 0, 0.25, 1, 0.5, -1, -0.5, 0.5, -0.75, -1.5,
                        -0.5, -0.75, 0.5, 0.75, 0.25, -0.25, -0.25, 0.75, -0.25, -1.5,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, -0.25, 0, 0, 0, 0, 0,
                        -0.25, -0.75, 0.5, 0.75, 0.25, -0.25, -0.25, 0.5, -0.25, -1.5,
                        -0.25, -1, 0.5, 0.5, 0, 0.25, -0.25, 0.25, 0.25, -0.5,
                        0, 0, -0.25, -0.25, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0.25, 0, 0, 0, 0, 0,
                        -0.25, -1, 0.25, 0.5, 0, 0, -0.25, 0.25, 0.25, -0.5,
                        0, -0.25, 0.25, 0.25, -0.25, 0.25, -0.25, 0, 0.25, 0,
                        0.25, 0, -0.25, -0.75, 0.25, 0.25, 0.25, 0, 0, 0.25,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, -0.25, 0.25, 0.25, 0, 0, -0.25, -0.25, 0.25, 0,
                        0, 0.25, -0.5, -0.75, 0.5, 0.25, 0.5, 0.5, -0.75, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0.25, 0, 0.25, 0.25, -0.5, 0, 0, -0.25, 0, 0.25,
                        0.25, 0, 0.25, 0, -0.5, 0, -0.25, -0.25, 0, 0.25,
                        -0.75, 0.75, -0.25, 0, 0.25, 0.25, 0.25, 0.5, -1, -0.25,
                        0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0.25, 0, 0, 0, -0.25, 0, -0.25, -0.25, 0, 0,
                        0.25, 0.25, 0, 0.5, 0.25, 0, 0.5, -1, -0.75, -0.75,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.25,
                        0, 0, 0, 0, -0.5, -0.25, 0.25, 1, -0.25, -1,
                        -0.75, -0.25, 0.25, 1, -0.25, -1.5, -1.25, 1, -0.25, -1.25,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0.25, -0.25, 0, 0.25, 0, 0, 0, 0, 0, 0,
                        -0.5, -0.25, 0.25, 1, -0.25, -1, -0.75, 1, -0.25, -1,
                        -0.5, -0.5, 0, 0.25, -0.25, -0.25, -0.5, 0.5, 0.25, -0.25,
                        0, 0, 0, -0.25, 0, 0, 0, -0.25, 0, 0,
                        0, 0, 0, 0, 0, 0.25, 0, 0, -0.25, 0,
                        0.25, -0.25, 0, 0, -0.25, 0.25, -0.75, 0.25, 0.25, -0.25,
                        0.5, -1.5, -0.5, -0.75, 0, 1.25, -1, -0.5, 0.75, -1.25,
                        0, 0, 0, 0, 0, -0.25, 0, 0, 0, 0,
                        0.25, 0.25, 0, 0, -0.5, 0, 0, 0.25, 0, 0,
                        0.25, 0.25, 0, 0.25, -0.5, -0.25, -0.5, 0.25, -0.25, 0,
                        -0.75, 1, 0.25, -0.25, 1, 0.5, 0.5, -1, -0.25, -2.25,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0.25, 0.25, 0, 0, -0.5, 0, 0, 0.25, 0, 0,
                        0.25, 0.25, 0, 0.25, -0.5, -0.25, -0.5, 0.25, -0.25, 0,
                        -0.75, 1, 0, -1.25, 0.75, 0.5, 1.25, -1, 0, -1.75,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, -0.25,
                        0.25, 0, 0, 0, -0.25, 0, -0.5, 0.25, -0.25, 0,
                        0.25, -0.25, 0, 0.25, 0, 0, -1, 0.25, 0, 0.25,
                        -1, 0.5, 0, 0, 0, 0, 0.75, -0.25, -0.75, 0,
                        0, 0, 0, 0, 0, 0, -0.75, 0.25, 0.25, 0.25,
                        0, 0, 0, 0, -0.25, 0.25, -1, 0.25, 0.25, 0,
                        };         
float image[] = {};

// int numElements = sizeof(image) / sizeof(image[0]);

float out[6400];


float* add_weights(int num_weights);
float* add_biases(int num_biases);

void read_image(float image[IMAGE_HEIGHT][IMAGE_WIDTH]);

void conv(float image[IMAGE_HEIGHT][IMAGE_WIDTH] , float *weights, float output[IMAGE_HEIGHT-2][IMAGE_WIDTH-2]);


void relu(float input[IMAGE_HEIGHT-2][IMAGE_WIDTH-2], float output[IMAGE_HEIGHT-2][IMAGE_WIDTH-2]);

void max_pool(float input[IMAGE_HEIGHT-2][IMAGE_WIDTH-2], float output[(IMAGE_HEIGHT-2)/2][(IMAGE_WIDTH-2)/2]);

// void conv(float, float *, float);
// void basic_ques(int num_parameters, int num_weights, int num_biases);

void HW(float *weights, int weights_address, int weights_size, float *data, int data_address, int data_size,  int layer_index, float *out);

void printArray(float *arr, int size);

void printFeatureMaps(float *arr, int height, int width, int channels);



#endif
